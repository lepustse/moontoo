#define  Mode_USR       0x10
#define  Mode_FIQ       0x11
#define  Mode_IRQ       0x12
#define  Mode_SVC       0x13
#define  Mode_MON       0x16
#define  Mode_ABT       0x17
#define  Mode_UDF       0x1B
#define  Mode_SYS       0x1F

#define A_Bit        0x100 
#define I_Bit        0x80 @; when I bit is set, IRQ is disabled
#define F_Bit        0x40 @; when F bit is set, FIQ is disabled
#define T_Bit        0x20

.global tz_init
.section ".text.init", "x"
tz_init:
	//运行到这里的时候，应该是s_svc
	//先把bss清空
	ldr r0, =__bss_start
	ldr r1, =__bss_end
	mov r2, #0
1:
	str r2, [r0], #4
	cmp r0, r1
	blo 1b

	ldr sp, =mon_stack_limit

	bl main

	b .

/* ------------------------- mt_sch ------------------------ */
/*
 * void __sch_start(void **sp);
 */
.global __sch_start
__sch_start:
    ldr sp, [r0]
    // 拿到栈指针，将初始化的内容弹出来，制造一个假的context
    ldmfd sp!, {r0-r12, lr, pc}

/*
 * void __mt_schedule(void **dst, void **src);
 * 保存lr，恢复lr
 */
.global __mt_schedule
__mt_schedule:
    stmfd sp!, {lr}
    stmfd sp!, {r0-r12, lr}
    str sp, [r1]

    ldr sp, [r0]
    ldmfd sp!, {r0-r12, lr, pc}

/* ------------------------- mt_sch ------------------------ */

.global mon_stack_limit
.bss
.align 2   //align to  2~2=4
mon_stack:
	.space (1 << 16) //64k stack
mon_stack_limit:
